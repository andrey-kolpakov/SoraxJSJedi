// function идентификатор(аргументы){инструкции}
// Аргументы - это переменные, с которыми мы производим  какие-то действия
// Потом результат возвращает return

//ИНСТРУКЦИЯ ОБЪЯВЛЕНИЯ ФУНКЦИИ - FUNCTION DECLARATION STATEMENT
function showMessage() {
    return 'Всем привет!'
  }
  
console.log(showMessage().toUpperCase())              //Выражение вызова функции. В точку вызова вернётся значение, которое мы возвращаем из функции
//Если функция ничего не возвращает, она вернёт undefined
//Если ничего не сделать с возвращенным значением, интерпретатор его забывает



//ТАКЖЕ МОЖНО ПРИСВОИТЬ ПЕРЕМЕННОЙ ВЫРАЖЕНИЕ ПЕРЕМЕННОЙ ФУНКЦИИ - FUNCTION DEFINITION EXPRESSION
let greet = function(name){
    return 'Здарова,' + name 
}
//здесь можно пропускать имя функции (после слова function), а можно не пропускать. Если имени нет, то такая функция называется анонимной.

console.log(greet('чувак'))
console.log(greet('чувак', 123, 'var', 'text', showMessage())) // Если мы передадим аргументов больше, чем функция ожидает получить, мы не получим ошибки. Просто аргументам не будет присвоено никакое имя.
console.log(greet())                                           // Возвращает Здарова, undefined - если передаем аргументов МЕНЬШЕ, чем ожидает функция, она присваивает и возвращает undefined возвращаемым, но не полученым, аргументам



let functionWithTroubles  = function(name){
    console.log(arguments)                                     //Объект arguments ведёт себя как массив и возвращает все аргументы, включая все переданные, но не объявленные
    return 'Опять ты, ' + name
}
console.log(functionWithTroubles('Димон', 'Лёха', 'Саня'))

console.log('   ')

let func = function(callback, name){        
    let text = 'Здарова снова коллбэкыч ' + name

    callback(text)
}
let funcCallback = function(text){                             //Callback - это функция, которая должна быть выполнена после того, как другая функция завершила выполнение (отсюда и название: callback – функция обратного вызова)
    console.log(text)
}

func(funcCallback, 'Андрюха')
console.log('   ')



let self = function(){                   //Функция может возвращать функцию. 
    return function(){
        console.log('Hi')
    }
}
self()()                                 //В точку вызова пришла анонимная функция, которую вернула функция self. Теперь её надо вызвать с помощью () и код из неё выполнится.
console.log('   ')



let newGreeting = function(name){
    return 'Ну снова здарова ' + name
}('тело')                                               //Функция может быть вызвана сразу после объявления, если используется выражение определения функции

console.log(newGreeting)                                //Можно подумать, что мы присваиваем переменной newGreeting функцию, но на самом деле мы присваемой ей значение функции. 


let newGreeting2 = (function(name){
    return 'Ну снова здарова в последний раз ' + name   //Иногда для большей ясности выражение вызова берут в круглые скобки, как это сделано здесь
}('тело'))                                              //Функция, которая сама вызывается после присваивания переменной называется АНОНИМНОЙ САМОВЫЗЫВАЮЩЕЙСЯ ФУНКЦИЕЙ - SELF-INVOKING ANONYMOUS FUNCTION. Ей можно дать имя, но таким ф-иям обычно не дают имён. Если она рекурсивная то имя дать нужно, конечно. Иначе её не получится вызвать.

console.log(newGreeting2)    