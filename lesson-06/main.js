console.log('String')
console.log("String")
// Строковые литералы записываются как при помощи двойных, так и при помощи одинарных кавычек, но желательно определиться
// Каждый символ занимает 2 байта



//Как сделать кавычки внутри кавычек? 
console.log("String and 'String'")      //возвращает String and 'String' - можно использовать ДРУГИЕ кавычки. Если снаружи двойные, то одинарные внутри. Если снаружи одинарные, внутри будут двойные.
console.log('String and "String"')      //возвращает String and 'String' - можно использовать ДРУГИЕ кавычки. Если снаружи двойные, то одинарные внутри. Если снаружи одинарные, внутри будут двойные.
console.log('String and \'String\'')    //возвращает String and 'String' - можно ЭКРАНИРОВАТЬ кавычки - то есть перед каждой кавычкой поставить обратный слеш \



//Строки на строчки
console.log('String is ths \
unique type of \
variable something')                    //Чтобы разделить части строк на несколько строчек (но вывести всё в одну строчку), нужно в конце каждой строчки поставить обратный слеш \ Необходимо проследить, чтобы после самого слеша не стояло никаких символов, даже пробелов

console.log('String is ths \n unique type of \n variable something')                    // \n - (new line) Разделить строку на несколько разных строчек в консоли (перенос строк)
console.log('String is ths \t unique type of \t variable something')                    // \t - (tabulation) Добавить табуляцию
console.log('String is ths \\ unique type of \\ variable something')                    // \\ - обратный слеш

                                                                                        // \t \n \` \\ - всё это называется УПРАВЛЯЮЩИЕ ПОСЛЕДОВАТЕЛЬНОСТИ 


//Методы и свойства
console.log('String'.length)            //Возвращает 6 - то есть длинну строки
console.log('String' + 10)              //Конкатенация - сложение строк, если один из операндов - строка

let string = 'Some strings are the most beautifull things in my life'
console.log(string[2])                           //Возвращает t - строки могут интерпретироваться как массивы

console.log(string.charAt(0))                    //Возвращает S - метод возвращает символ под индексом, переданным в качестве аргумента в метод. Индексы считаются с 0. S - символ под индексом 0
console.log(string.charAt(string.length-1))      //Возвращает e - последний символ, вычисленный из длинны строки -1
console.log(string.substring(10))                //Возвращает все символы, начиная с того, что под индексом 10. Возвращает ПОДСТРОКУ
console.log(string.substring(10,21))             //Первый аргумент - начало подстроки (индекс), второй аргумент - конец подстроки (индекс)

console.log(string.substr(14,15))                //То же самое, что и substring, но второй аргумент принимает кол-во символов, которые нужно взять, а не индекс конечного.

console.log(string.slice(-10))                   //То же самое, что substring, но умеет брать подстроку, начиная с конца. Для этого нужно передать аргумент с отрицательным значением. Здесь начиная с 10 с конца символа и до конца

console.log(string.indexOf('are'))               //Поиск начала заданного текста в строке
console.log(string.lastIndexOf('e'))             //Поиск последнего заданного текста в строке

console.log(string.replace('are', 'are not'))    //Замена найденного первого аргумента на второй

console.log(string.split(' '))                   //Разбивает строку на массив, используя символ (принимаемый как аргумент), как разделитель. Например, чтобы отделить слова по пробелу

console.log(string.toUpperCase())                  //Приведение к верхнему регистру
console.log(string.toLowerCase())                  //Приведение к нижнему регистру     

//Строка - это неизменяемый тип данных. Все методы и свойства возвращают ДРУГУЮ строку, оригинальная остаётся неизменённой. Чтобы изменить её нужно:
string = string.substring(10)
console.log('Old string is replaced: ', string)


