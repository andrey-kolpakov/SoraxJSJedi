let i = 12;         
//Это глобальная область видимости

//В функции локальная область видимости. Свои локальные области видимости в JS создают только функции.
let func = function(){
    let i = 15;
    console.log('Функция func i=' + i)

    let funcInner = function(){
        let i = 25;
        console.log('Функция funcInner i=' +i)                  //Когда на этой строке мы обращаемся к переменной i, интепретатор в первую очередь проверяет первую область видимости в цепочке - то есть эту функцию funcInner. Если он её не найдет, он перейдет в следующую область видимости в цепочке, то есть в функцию Funс, если опять не найдёт, перейдет в глобальную область видимости - к let=12 на 1 строке. Если мы уберём ключевое слово let в этой функции, интерепретатор воспримет это как замену значения i из следующей области видимости - из функции func
    }

    funcInner()
}();

console.log('Глобальная i=',i)
console.log('\n\n\n')



let func2 = function(){
    let i = 15;
    console.log('Функция func2 i=' + i)

    let funcInner = function(){
        console.log(i)                                           //Логично предположить, что увидя обращение к необъявленной i, интепретатор обратится к следующей области видимости в цепочке функции и возьмет её из функции func2.
        let i = 25;                                              //Но произойдёт hoisting или подъем. Интерпретатор знает про объявление всех переменных в момент объявления функции. ПОДНИМАЕТ их в начало, но без присваивания значений. 
    }                                                            //Поэтому из console.log на 27 строке вернётся undefined, как если бы переменная была объявлена, но ей не было бы присвоено значение (не произошло еще инициализации)

    funcInner()
}();